************************************************************************
Example - 
0 - 1 - 2 - 3
INPUT:
4 // no of vertices
3 // no of edges
0 2 //edge between 0 and 2
2 1 // edge between 2 and 1
1 3 // edge between 1 and 3
OUTPUT:
0 2 1 3
*************************************************************************


#include <iostream>
using namespace std;
void print(int **arr, int n, int start_vertex, bool *visited)
{
    cout << start_vertex << " ";
    visited[start_vertex] = true;
    for(int i = 0; i < n; i++)
    {
        if(i == start_vertex)  //if current vertex is start vertex then continue
        continue;
        
        if(arr[start_vertex][i] == 1) // if there is an edge between start_vertex and current vertex then proceed 
        {
            if(visited[i] == true)   // if current vertex is already visited then move to the next vertex
            continue;
            else
            print(arr, n, i, visited);  // if current vertex is not visited then recusively call print function(now start_vertex will be current vertex that is i)
        }
        
    }
}

int main()
{
    // n -> no_of_vertices, e -> no_of_edges
    int n,e;
    cin >> n >> e;
    int **arr = new int*[n]; //adjacency matrix
    for(int i = 0; i < n; i++)
    {
        arr[i] = new int[n];
        for(int j = 0; j < n; j++)
        {  
            arr[i][j] = 0;  //initially marked no edge between any two vertices
        }
    }
    
    //taking inputs of edges 
    for(int i = 0; i < e; i++)
    {
        int start, end;
        cin >> start >> end;
        arr[start][end] = 1;  //marking the edge 
        arr[end][start] = 1;
    }
    
    bool *visited = new bool[n];
    for(int i = 0; i < n; i++)
    visited[i] = false;   //initially marking no vertex is visited
    
    
    //printing the graph
    print(arr, n, 0, visited);
    
     //we have to check, is there any vertex which is not yet visited(in case of disconnected graph)
    for(int i = 0; i < n; i++)
        if(!visited[i])
    		print(arr, n, i, visited);
            
    //delete dynamic memory
    for(int i = 0; i < n; i++)
    delete [] arr[i];
    
    delete [] arr;
    delete [] visited;
    

    return 0;
}
