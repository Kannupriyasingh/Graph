*************************************************************************************
INPUT:
4 4  //no of vertices = 4, no of edges = 4
0 1  //edge between 0 and 1
0 3  //edge between 0 and 3
1 2  //edge between 1 and 2
2 3  //edge between 2 and 3

OUTPUT:
0 1 3 2
*************************************************************************************

#include <iostream>
#include <bits/stdc++.h>
using namespace std;
void print(int **arr, int n, int e, int start_vertex, bool *visited)
{
   queue<int>q;
   q.push(start_vertex);
   visited[start_vertex] = true;
   while(!q.empty())
   {
       int current_vertex = q.front();
       q.pop();
       cout << current_vertex << " ";
       for(int i = 0; i < n; i++)
       {
           if(i == current_vertex)
           continue;
           
           if(arr[current_vertex][i] == 1 && !visited[i])
           {
               q.push(i);
               visited[i] = true;
           }
       }
   }
}

int main()
{
    // n -> no_of_vertices, e -> no_of_edges
    int n,e;
    cin >> n >> e;
    int **arr = new int*[n]; //adjacency matrix
    for(int i = 0; i < n; i++)
    {
        arr[i] = new int[n];
        for(int j = 0; j < n; j++)
        {  
            arr[i][j] = 0;  //initially marked no edge between any two vertices
        }
    }
    
    //taking inputs of edges 
    for(int i = 0; i < e; i++)
    {
        int start, end;
        cin >> start >> end;
        arr[start][end] = 1;  //marking the edge 
        arr[end][start] = 1;
    }
    
    bool *visited = new bool[n];
    for(int i = 0; i < n; i++)
    visited[i] = false;   //initially marking no vertex is visited
    
    
     //we have to check, is there any vertex which is not yet visited(in case of disconnected graph)
    for(int i = 0; i < n; i++)
        if(!visited[i])
    		print(arr, n, e, i, visited);
    
    for(int i = 0; i < n; i++)
    delete [] arr[i];
    
    delete [] arr;
    delete [] visited;
    
    return 0;
}
